> use studentDatabase
switched to db studentDatabase
> db.createCollection("student")
{ "ok" : 1 }
> db.student.insert({_id:1,name:"Mahalaxmi",usn:"bm65",sem:6,dept_name:"cse",cgpa:10,$addToSet:{hobbies:"reading"}})
WriteResult({
	"nInserted" : 0,
	"writeError" : {
		"code" : 2,
		"errmsg" : "Document can't have $ prefixed field names: $addToSet"
	}
})
> db.student.insert({_id:1,name:"Mahalaxmi",usn:"bm65",sem:6,dept_name:"cse",cgpa:10,{$addToSet:{hobbies:"reading"}}})
2022-04-18T14:24:49.577+0530 E QUERY    [thread1] SyntaxError: invalid property id @(shell):1:83
> db.student.insert({_id:1,name:"Mahalaxmi",usn:"bm65",sem:6,dept_name:"cse",cgpa:10},{$addToSet:{hobbies:"reading"}})
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : 1, "name" : "Mahalaxmi", "usn" : "bm65", "sem" : 6, "dept_name" : "cse", "cgpa" : 10 }
> db.student.insert({_id:1,name:"Mahalaxmi",usn:"bm65",sem:6,dept_name:"cse",cgpa:10,hobbies:["reading","playing"]})
WriteResult({
	"nInserted" : 0,
	"writeError" : {
		"code" : 11000,
		"errmsg" : "E11000 duplicate key error collection: studentDatabase.student index: _id_ dup key: { : 1.0 }"
	}
})
> db.student.drop()
true
> db.createCollection("student")
{ "ok" : 1 }
> db.student.insert({_id:1,name:"Mahalaxmi",usn:"bm65",sem:6,dept_name:"cse",cgpa:10,hobbies:["reading","playing"]})
WriteResult({ "nInserted" : 1 })
> db.student.find()
{ "_id" : 1, "name" : "Mahalaxmi", "usn" : "bm65", "sem" : 6, "dept_name" : "cse", "cgpa" : 10, "hobbies" : [ "reading", "playing" ] }
> db.student.insert({_id:2,name:"Damodar",usn:"bm67",sem:6,dept_name:"cse",cgpa:10,hobbies:["reading","playing","singing"]})
WriteResult({ "nInserted" : 1 })
> db.student.insert({_id:3,name:"Mala",usn:"bm64",sem:8,dept_name:"ece",cgpa:8,hobbies:["reading","playing","singing","dancing"]})
WriteResult({ "nInserted" : 1 })
> db.student.insert({_id:4,name:"Sulatha",usn:"bm64",sem:4,dept_name:"eee",cgpa:7,hobbies:["reading","singing","dancing"]})
WriteResult({ "nInserted" : 1 })
> db.student.insert({_id:5,name:"Sumukha",usn:"bm60",sem:8,dept_name:"bt",cgpa:7,hobbies:["reading"]})
WriteResult({ "nInserted" : 1 })
> db.student.remove({id:3})
WriteResult({ "nRemoved" : 0 })
> db.student.remove({_id:3})
WriteResult({ "nRemoved" : 1 })
> db.student.insert({_id:3,name:"Mala",usn:"bm59",sem:8,dept_name:"ece",cgpa:8,hobbies:["reading","playing","singing","dancing"]})
WriteResult({ "nInserted" : 1 })
> db.student.find().pretty()
{
	"_id" : 1,
	"name" : "Mahalaxmi",
	"usn" : "bm65",
	"sem" : 6,
	"dept_name" : "cse",
	"cgpa" : 10,
	"hobbies" : [
		"reading",
		"playing"
	]
}
{
	"_id" : 2,
	"name" : "Damodar",
	"usn" : "bm67",
	"sem" : 6,
	"dept_name" : "cse",
	"cgpa" : 10,
	"hobbies" : [
		"reading",
		"playing",
		"singing"
	]
}
{
	"_id" : 4,
	"name" : "Sulatha",
	"usn" : "bm64",
	"sem" : 4,
	"dept_name" : "eee",
	"cgpa" : 7,
	"hobbies" : [
		"reading",
		"singing",
		"dancing"
	]
}
{
	"_id" : 5,
	"name" : "Sumukha",
	"usn" : "bm60",
	"sem" : 8,
	"dept_name" : "bt",
	"cgpa" : 7,
	"hobbies" : [
		"reading"
	]
}
{
	"_id" : 3,
	"name" : "Mala",
	"usn" : "bm59",
	"sem" : 8,
	"dept_name" : "ece",
	"cgpa" : 8,
	"hobbies" : [
		"reading",
		"playing",
		"singing",
		"dancing"
	]
}
> db.student.find({dept_name:"cse"})
{ "_id" : 1, "name" : "Mahalaxmi", "usn" : "bm65", "sem" : 6, "dept_name" : "cse", "cgpa" : 10, "hobbies" : [ "reading", "playing" ] }
{ "_id" : 2, "name" : "Damodar", "usn" : "bm67", "sem" : 6, "dept_name" : "cse", "cgpa" : 10, "hobbies" : [ "reading", "playing", "singing" ] }
> db.student.find({dept_name:"cse"}).aggregate({$group:{id:"_id",avgCgpa:{$sum:"$cgpa"}}})
2022-04-18T14:42:16.825+0530 E QUERY    [thread1] TypeError: db.student.find(...).aggregate is not a function :
@(shell):1:1
> db.student.aggregate({$group:{id:"_id",avgCgpa:{$sum:"$cgpa"}}})
assert: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1

2022-04-18T14:43:10.025+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1
> db.student.aggregate({$group:{id:"id",avgCgpa:{$sum:"$cgpa"}}})
assert: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1

2022-04-18T14:43:30.747+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1
> db.student.aggregate({$group:{id:"_id",avgCgpa:{$sum:"$cgpa"}}})
assert: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1

2022-04-18T14:44:44.764+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'id' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1
> db.createCollection("students")
{ "ok" : 1 }
> db.students.insert({_id:1,name:"Jan",grade:"A",hobbies:["reading"],dob:"21-05-2001"})
WriteResult({ "nInserted" : 1 })
> 
> db.students.insert({_id:2,name:"Feb",grade:"B",hobbies:["reading"],dob:"21-08-2001"})
WriteResult({ "nInserted" : 1 })
> db.students.insert({_id:3,name:"Mar",grade:"C",hobbies:["reading","writing"],dob:"21-08-2002"})
WriteResult({ "nInserted" : 1 })
> db.students.find().pretty()
{
	"_id" : 1,
	"name" : "Jan",
	"grade" : "A",
	"hobbies" : [
		"reading"
	],
	"dob" : "21-05-2001"
}
{
	"_id" : 2,
	"name" : "Feb",
	"grade" : "B",
	"hobbies" : [
		"reading"
	],
	"dob" : "21-08-2001"
}
{
	"_id" : 3,
	"name" : "Mar",
	"grade" : "C",
	"hobbies" : [
		"reading",
		"writing"
	],
	"dob" : "21-08-2002"
}
> db.students.find({},{name:1})
{ "_id" : 1, "name" : "Jan" }
{ "_id" : 2, "name" : "Feb" }
{ "_id" : 3, "name" : "Mar" }
> db.students.find({},{name:1,_id:0})
{ "name" : "Jan" }
{ "name" : "Feb" }
{ "name" : "Mar" }
> db.students.find({name:1.grade:1,_id:1})
2022-04-18T14:51:21.721+0530 E QUERY    [thread1] SyntaxError: identifier starts immediately after numeric literal @(shell):1:23
> 
> db.students.find({name:1,grade:1,_id:1})
> db.students.find({},{name:1,grade:1,_id:1})
{ "_id" : 1, "name" : "Jan", "grade" : "A" }
{ "_id" : 2, "name" : "Feb", "grade" : "B" }
{ "_id" : 3, "name" : "Mar", "grade" : "C" }
> db.students.find({$grade:{$ne:"B"}})
Error: error: {
	"ok" : 0,
	"errmsg" : "unknown top level operator: $grade",
	"code" : 2,
	"codeName" : "BadValue"
}
> db.students.find({grade:{$ne:"B"}})
{ "_id" : 1, "name" : "Jan", "grade" : "A", "hobbies" : [ "reading" ], "dob" : "21-05-2001" }
{ "_id" : 3, "name" : "Mar", "grade" : "C", "hobbies" : [ "reading", "writing" ], "dob" : "21-08-2002" }
> db.students.find({hobbies:{$in:["reading"]},name:"Mar"})
{ "_id" : 3, "name" : "Mar", "grade" : "C", "hobbies" : [ "reading", "writing" ], "dob" : "21-08-2002" }
> db.students.find({name:/n$/}).pretty()
{
	"_id" : 1,
	"name" : "Jan",
	"grade" : "A",
	"hobbies" : [
		"reading"
	],
	"dob" : "21-05-2001"
}
> db.createCollection("bank")
{ "ok" : 1 }
> db.bank.insert({_id:1,name:"a",acctType:"S",bal:1000,terms:[1,2]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:2,name:"a",acctType:"S",bal:1000,terms:[1]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:3,name:"a"db,acctType:"S",bal:1000,terms:[1]})
2022-04-18T15:06:29.725+0530 E QUERY    [thread1] SyntaxError: missing } after property list @(shell):1:30
> db.bank.drop()
true
> db.createCollection("bank")
{ "ok" : 1 }
> db.bank.insert({_id:1,name:"a",acctType:"S",bal:1000,terms:[1,2]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:2,name:"b",acctType:"S",bal:1000,terms:[1]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:3,name:"c",acctType:"S",bal:1000,terms:[1,2,3]})
WriteResult({ "nInserted" : 1 })
> db.bank.update({_id:2},{$push:{terms:[2]}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.bank.find().pretty()
{
	"_id" : 1,
	"name" : "a",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2
	]
}
{
	"_id" : 2,
	"name" : "b",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		[
			2
		]
	]
}
{
	"_id" : 3,
	"name" : "c",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		3
	]
}
> db.bank.drop()
true
> db.bank.insert({_id:1,name:"a",acctType:"S",bal:1000,terms:{"acc1":5}})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:2,name:"b",acctType:"S",bal:1000,terms:{"acc1":5,"acct2":7}})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:3,name:"c",acctType:"S",bal:1000,terms:{"acc1":5,"acct2":7}})
WriteResult({ "nInserted" : 1 })
> db.bank.update({_id:2},{$push:{terms:{acct3:10}}})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 0,
	"nModified" : 0,
	"writeError" : {
		"code" : 2,
		"errmsg" : "The field 'terms' must be an array but is of type object in document {_id: 2.0}"
	}
})
> db.bank.update({_id:2},{$push:{terms:{"acct3":10}}})
WriteResult({
	"nMatched" : 0,
	"nUpserted" : 0,
	"nModified" : 0,
	"writeError" : {
		"code" : 2,
		"errmsg" : "The field 'terms' must be an array but is of type object in document {_id: 2.0}"
	}
})
> db.bank.drop()
true
> db.createCollection("bank")
{ "ok" : 1 }
> db.bank.insert({_id:1,name:"a",acctType:"S",bal:1000,terms:[1,2]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:2,name:"b",acctType:"S",bal:1000,terms:[1,2,5]})
WriteResult({ "nInserted" : 1 })
> db.bank.insert({_id:3,name:"c",acctType:"S",bal:1000,terms:[1,2,5]})
WriteResult({ "nInserted" : 1 })
> db.bank.update({_id:2},{$push:{terms:10}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.bank.find().pretty()
{
	"_id" : 1,
	"name" : "a",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2
	]
}
{
	"_id" : 2,
	"name" : "b",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5,
		10
	]
}
{
	"_id" : 3,
	"name" : "c",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5
	]
}
> db.bank.update({_id:1},{$set:{'terms.1':3}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.bank.find().pretty()
{
	"_id" : 1,
	"name" : "a",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		3
	]
}
{
	"_id" : 2,
	"name" : "b",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5,
		10
	]
}
{
	"_id" : 3,
	"name" : "c",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5
	]
}
> db.students.update({name:"a"},{$set:{bal:2000}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.students.update({_id:1,name:"a"},{$set:{bal:2000}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.students.update({"name":"a"},{$set:{bal:2000}})
WriteResult({ "nMatched" : 0, "nUpserted" : 0, "nModified" : 0 })
> db.bank.update({name:"a"},{$set:{bal:2000}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
> db.bank.find().pretty()
{
	"_id" : 1,
	"name" : "a",
	"acctType" : "S",
	"bal" : 2000,
	"terms" : [
		1,
		3
	]
}
{
	"_id" : 2,
	"name" : "b",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5,
		10
	]
}
{
	"_id" : 3,
	"name" : "c",
	"acctType" : "S",
	"bal" : 1000,
	"terms" : [
		1,
		2,
		5
	]
}
> db.student.aggregate({$match:{dept_name:"cse"}},{$group:{semester:"$sem",avgCgpa:{$sum:{"$cgpa"}}}},{$match:{avgCgpa:{$gt:7.5}}})
2022-04-18T15:30:09.928+0530 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:95
> db.student.aggregate({$match:{dept_name:"cse"}},{$group:{semester:"$sem",avgCgpa:{$avg:{"$cgpa"}}}},{$match:{avgCgpa:{$gt:7.5}}})
2022-04-18T15:32:16.761+0530 E QUERY    [thread1] SyntaxError: missing : after property id @(shell):1:95
> show collections
bank
student
students
> db.student.aggregate({$match:{dept_name:"cse"}},{$group:{semester:"$sem",avgCgpa:{$avg:"$cgpa"}}},{$match:{avgCgpa:{$gt:7.5}}})
assert: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'semester' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1

2022-04-18T15:34:51.882+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'semester' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1
> db.student.aggregate({$match:{dept_name:"cse"}},{$group:{"semester":"$sem","avgCgpa":{$avg:"$cgpa"}}},{$match:{avgCgpa:{$gt:7.5}}})
assert: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'semester' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1

2022-04-18T15:37:05.882+0530 E QUERY    [thread1] Error: command failed: {
	"ok" : 0,
	"errmsg" : "The field 'semester' must be an accumulator object",
	"code" : 40234,
	"codeName" : "Location40234"
} : aggregate failed :
_getErrorWithCode@src/mongo/shell/utils.js:25:13
doassert@src/mongo/shell/assert.js:16:14
assert.commandWorked@src/mongo/shell/assert.js:403:5
DB.prototype._runAggregate@src/mongo/shell/db.js:260:9
DBCollection.prototype.aggregate@src/mongo/shell/collection.js:1212:12
@(shell):1:1
> db.student.aggregate({$match:{dept_name:"cse"}},{$group:{"semester":"$sem","avgCgpa":{$avg:"$cgpa"}}},{$match:{avgCgpa:{$gt:7.5}}})

